// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/gss.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoSystemStatesClient is the client API for GoSystemStates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoSystemStatesClient interface {
	UploadMetrics(ctx context.Context, in *UserMetricStorage, opts ...grpc.CallOption) (*Empty, error)
	GetUsersMetrics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UsersMetrics, error)
	MetricsByUUID(ctx context.Context, in *MetricsByUUIDRequest, opts ...grpc.CallOption) (*MetricsByUUIDResponse, error)
}

type goSystemStatesClient struct {
	cc grpc.ClientConnInterface
}

func NewGoSystemStatesClient(cc grpc.ClientConnInterface) GoSystemStatesClient {
	return &goSystemStatesClient{cc}
}

func (c *goSystemStatesClient) UploadMetrics(ctx context.Context, in *UserMetricStorage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gss.goSystemStates/uploadMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goSystemStatesClient) GetUsersMetrics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UsersMetrics, error) {
	out := new(UsersMetrics)
	err := c.cc.Invoke(ctx, "/gss.goSystemStates/getUsersMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goSystemStatesClient) MetricsByUUID(ctx context.Context, in *MetricsByUUIDRequest, opts ...grpc.CallOption) (*MetricsByUUIDResponse, error) {
	out := new(MetricsByUUIDResponse)
	err := c.cc.Invoke(ctx, "/gss.goSystemStates/metricsByUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoSystemStatesServer is the server API for GoSystemStates service.
// All implementations must embed UnimplementedGoSystemStatesServer
// for forward compatibility
type GoSystemStatesServer interface {
	UploadMetrics(context.Context, *UserMetricStorage) (*Empty, error)
	GetUsersMetrics(context.Context, *Empty) (*UsersMetrics, error)
	MetricsByUUID(context.Context, *MetricsByUUIDRequest) (*MetricsByUUIDResponse, error)
	mustEmbedUnimplementedGoSystemStatesServer()
}

// UnimplementedGoSystemStatesServer must be embedded to have forward compatible implementations.
type UnimplementedGoSystemStatesServer struct {
}

func (UnimplementedGoSystemStatesServer) UploadMetrics(context.Context, *UserMetricStorage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadMetrics not implemented")
}
func (UnimplementedGoSystemStatesServer) GetUsersMetrics(context.Context, *Empty) (*UsersMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersMetrics not implemented")
}
func (UnimplementedGoSystemStatesServer) MetricsByUUID(context.Context, *MetricsByUUIDRequest) (*MetricsByUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsByUUID not implemented")
}
func (UnimplementedGoSystemStatesServer) mustEmbedUnimplementedGoSystemStatesServer() {}

// UnsafeGoSystemStatesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoSystemStatesServer will
// result in compilation errors.
type UnsafeGoSystemStatesServer interface {
	mustEmbedUnimplementedGoSystemStatesServer()
}

func RegisterGoSystemStatesServer(s grpc.ServiceRegistrar, srv GoSystemStatesServer) {
	s.RegisterService(&GoSystemStates_ServiceDesc, srv)
}

func _GoSystemStates_UploadMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMetricStorage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoSystemStatesServer).UploadMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gss.goSystemStates/uploadMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoSystemStatesServer).UploadMetrics(ctx, req.(*UserMetricStorage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoSystemStates_GetUsersMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoSystemStatesServer).GetUsersMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gss.goSystemStates/getUsersMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoSystemStatesServer).GetUsersMetrics(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoSystemStates_MetricsByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsByUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoSystemStatesServer).MetricsByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gss.goSystemStates/metricsByUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoSystemStatesServer).MetricsByUUID(ctx, req.(*MetricsByUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoSystemStates_ServiceDesc is the grpc.ServiceDesc for GoSystemStates service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoSystemStates_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gss.goSystemStates",
	HandlerType: (*GoSystemStatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "uploadMetrics",
			Handler:    _GoSystemStates_UploadMetrics_Handler,
		},
		{
			MethodName: "getUsersMetrics",
			Handler:    _GoSystemStates_GetUsersMetrics_Handler,
		},
		{
			MethodName: "metricsByUUID",
			Handler:    _GoSystemStates_MetricsByUUID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gss.proto",
}
